* service "active" state is currently a combination of explicit marking and
  state of dependents. I.e. a service is "active" if it has a running
  dependent. This means it may restart automatically if it dies for some
  reason (via normal restart or smooth recovery).
      However, this is not always ideal. Sometimes the dependent is only
  running because it is waiting for its own dependents to stop; that is,
  there is no dependent further down the hierarchy that is explicitly
  marked active. In that case, we don't really want to restart the service
  that happened to die (unless and until a dependent becomes active).
      The key here is to set the desired state to STOPPED earlier. When a
  service is stopping all its dependencies which aren't otherwise required
  should also go into STOPPING state (but should not actually start stopping
  until the dependent is stopped). The means counting the two types of
  require - require from running service vs require from stopping service -
  separately.

* shutdown command presently hangs if terminal output blocked (scroll lock
  via ^S). Should use a buffer as dinit does, and pipe output from subcommands
  via the buffer too.

* Document utilities (particularly dinitctl) in the README


For version 1.0:
----------------
* Documentation including sample service definitions
  - Man pages
* Better error handling, logging of errors (largely done, still some patches
  of code where it may be missing - check TODO's in code).
* Write wtmp entry on startup (see simpleinit)
* Allow running services as a different UID
* Must be able to specify kill timeout (after which kill -9!)
* Must rate-limit restart of services. Trying to start at a greater rate
  should trigger failed-to-start notification.
* "triggered" service type: external process notifies Dinit when the service
  has started.
* Ability to reload stopped services (reload service description)


For later:
----------
* On linux when running with PID != 1, write PID to /proc/sys/kernel/cad_pid so
  that we still receive SIGINT from ctrl+alt+del (must be done after /proc is
  mounted, possibly could be left to a service script)
* Perhaps need a way to prevent script services from re-starting.
  (eg there's no need to mount filesystems twice; there might be various other
   system initialisations that can't or shouldn't really be "undone" and so do
   not need to be re-done).
* Internationalisation
* More logging options. Can currently log to syslog only (well, with the
  syslog protocol, to /dev/log). Possibly should be able to log directly
  to a file, or input stream of another process.
* A service can prevent shutdown/reboot by failing to stop. Maybe make
  multiple CTRL-ALT-DEL presses (or ^C since that's more portable) commence
  immediate shutdown (or launch a simple control interface).
* Interruptible scripted services - where it's ok to terminate the start
  script with a signal (and return the service to the STOPPED state). So a long-
  running filesystem check, for instance, need not hold up shutdown.
* When we take down a service or tty session, it would be ideal if we could kill
  the whole process tree, not just the leader process.
* Investigate using cn_proc netlink connector (cn_proc.h) to receive process
  termination events even when running with PID != 1 (Linux only).
  Also, there is the possibility of having a small, simple PID-1 init which
  sends terminated process IDs over a pipe to Dinit. Finally, it may be possible
  to run dinit (and subprocesses) in a new PID namespace (again linux-only).
* Allow logging tasks to memory (growing or circular buffer) and later
  switching to disk logging (allows for filesystem mounted readonly on boot).
  But perhaps this really the responsibility of another daemon.
* Allow running services with different resource limits, chroot, cgroups,
  namespaces (pid/fs/uid), etc
* Make default control socket location build-time configurable
* Allow specifying a timeout for killing services; if they don't die within
  the timeout (after a TERM) then hit them with a KILL.
* A (perhaps limited) way(s) to modify a service description after it is loaded -
  eg add/remove dependencies, change properties.

Even later / Maybe never:
* Support recognising /etc/init.d services automatically (as script services, with
  no dependency management - or upstart compatible dependency management)
  Also BSD's rc.d style scripts (PROVIDE, REQUIRE).
* Place some reasonable, soft limit on the number of services to be started
  simultaneously, to prevent thrashing. Services that are taking a long time
  to start don't count to the limit. Maybe use CPU/IO usage as a controlling
  factor.
* Cron-like tasks (if started, they run a sub-task periodically. Stopping the
  task will wait until the sub-task is complete). 
* Allow to run services attached to virtual tty, allow connection to that tty (ala "screen").
* SystemD-like handling of filesystem mounts (see autofs documentation in kernel)
  i.e. a mount point gets an autofs attached, and lazily gets mounted when accessed
  (or is mounted in parallel). Probably put the functionality in a separate daemon.


Documentation:
* Design philosophy/rationale document
* Coding style guidelines

* What's the best TERM setting? gogetty gives me "linux" but I think other variants may be
  better (eg "linux-c").

* Figure out the ConsoleKit/logind / PolicyKit mess & how dinit needs to fit into it.
  * Consolekit/logind tracks "sessions". Provides a mechanism to mark a session starting,
    associates processes with sessions, provides calls to terminate sessions etc (why?!!)
    Can use environment variable or cgroups to track processes in a session.
    A PAM module exists to create/destroy sessions.
  * Consolekit/logind also allows for requesting shutdown, reboot, and inhibiting reboot
    (via dbus API).
  * "seats" are a set of input/output hardware (mouse/keyboard/monitor) on which a session
    can be run. You can have multiple sessions on a seat - one is in the foreground
    (eg linux virtual ttys implement multiple sessions on a single seat).
    Sessions can run without a seat (eg ssh session).
